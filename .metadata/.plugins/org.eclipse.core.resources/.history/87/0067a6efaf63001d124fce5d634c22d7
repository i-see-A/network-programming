import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Rectangle;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;

import javax.swing.JPanel;
import javax.swing.Timer;

public class GamePlay extends JPanel implements KeyListener, ActionListener{
	private boolean play = false; //게임이 지 혼자 플레이 되지 않기 하기 위해
	private int score = 0; //우리 게임에서는 점수 기록 안하기 때문에 추후에 없애줘야함.
	
	private int totalBricks = 21; //전체 벽돌 수도 나중에 바꿔줘야함.
	
	private Timer timer;
	private int delay = 8; //
	
	private int playerX = 310; //bar의 위치
	
	private int ballposX = 120; //ball 위치
	private int ballposY = 350;
	private int ballXdir = -1; //
	private int ballYdir = -2;
	
	private MapGenerator map;
	
	public GamePlay() { //
		map = new MapGenerator(3,7);
		addKeyListener(this);
		setFocusable(true);
		setFocusTraversalKeysEnabled(false);
		timer = new Timer(delay, this);
		timer.start();
		
		
	}
	
	public void paint(Graphics g) {
		//background
		g.setColor(Color.black); //배경색깔
		g.fillRect(1, 1, 692, 592); //크기 추후에 바꿔줘야함.
		
		//drawing map
		map.draw((Graphics2D)g);
		
		//borders
		g.setColor(Color.yellow);
		g.fillRect(0, 0, 3, 592);
		g.fillRect(0, 0, 692, 3);
		g.fillRect(691, 0, 3, 592);
		
		//scores
		g.setColor(Color.white);
		g.setFont(new Font("serif", Font.BOLD,25));
		g.drawString(""+score, 650, 50);
		
		//the paddle
		g.setColor(Color.green); //bar인가?
		g.fillRect(playerX, 550, 100, 8);
		
		//the ball 나중에 이미지로 바꾸기
		g.setColor(Color.yellow);
		g.fillOval(ballposX, ballposY, 20, 20);
		
		g.dispose();
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		timer.start();
		if(play) { //플레이가 되면
			if(new Rectangle(ballposX, ballposY,20,20).intersects(new Rectangle(playerX, 550, 100,8))) {
				ballYdir = -ballYdir;
			}
			
			A: for(int i = 0; i<map.map.length; i++ ) { //첫번째 map은 Mapgenerator map, 두번째 map은 map[][]
				for(int j=0;j<map.map[0].length;j++) {
					if(map.map[i][j] > 0) {
						int brickX = j * map.brickWidth + 80;
						int brickY = i * map.brickHeight + 50;
						int brickWidth = map.brickWidth;
						int brickHeight = map.brickHeight;
						
						Rectangle rect = new Rectangle(brickX, brickY, brickWidth, brickHeight);
						Rectangle ballRect = new Rectangle(ballposX,ballposY,20,20);
						Rectangle brickRect = rect;
						
						if(ballRect.intersects(brickRect)) {
							map.setBrickValue(0, i, j);
							totalBricks--;
							score += 5; //점수는 필요없으니 나중에 지우기
							
							if(ballposX + 19 <= brickRect.x || ballposX + 1 >= brickRect.x + brickRect.width) {
								ballXdir = -ballXdir;
							} else {
								ballYdir = -ballYdir;
							}
							
							break A;
						}
					}
				}
			}
			ballposX += ballXdir;
			ballposY += ballYdir;
			if(ballposX <0) {
				ballXdir = -ballXdir;
			}
			if(ballposY <0) {
				ballYdir = -ballYdir;
			}
			if(ballposX >670) {
				ballXdir = -ballXdir;
			}
			
		}
		repaint(); //actionPerformed되면 timer 시작, 위의 게임을 다시 그린다.
	}

	@Override
	public void keyTyped(KeyEvent e) {}
	@Override
	public void keyReleased(KeyEvent e) {}
	
	@Override
	public void keyPressed(KeyEvent e) {
		if(e.getKeyCode()==KeyEvent.VK_RIGHT) {
			if(playerX >= 600) { //화면 밖으로 나가지 않도록, 추후 크기 바뀌고 나서 숫자 조정 필요
				playerX = 600;
			} else {
				moveRight();
			}
			
		}
		if(e.getKeyCode()==KeyEvent.VK_LEFT) {
			if(playerX < 10) { //화면 밖으로 나가지 않도록, 추후 크기 바뀌고 나서 숫자 조정 필요
				playerX = 10;
			} else {
				moveLeft();
			}
		}
		
	}
	
	public void moveRight() {
		play = true;
		playerX += 20;
	}
	
	public void moveLeft() {
		play = true;
		playerX -= 20;
	}

	 //게임 플레이할 panel이고, main의 jframe에 들어가야함

}
